/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MO_TOG(layer) &mo_tog layer layer

/ {
    behaviors {
      mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };
        td_mshft: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt LSHIFT CAPSLOCK>,
                <&kp LCTRL>;
        };
        td_mq: tap_dance_q {
            compatible = "zmk,behavior-tap-dance";
            label = "Q";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N1>,
                <&kp EXCL>;
        };
        td_mw: tap_dance_w {
            compatible = "zmk,behavior-tap-dance";
            label = "W";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N2>,
                <&kp AT>;
        };
        td_me: tap_dance_e {
            compatible = "zmk,behavior-tap-dance";
            label = "E";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N3>,
                <&kp HASH>;
        };
        td_mr: tap_dance_r {
            compatible = "zmk,behavior-tap-dance";
            label = "R";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N4>,
                <&kp DOLLAR>;
        };
        td_mt: tap_dance_t {
            compatible = "zmk,behavior-tap-dance";
            label = "T";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N5>,
                <&kp PERCENT>;
        };
        td_my: tap_dance_y {
            compatible = "zmk,behavior-tap-dance";
            label = "Y";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N6>,
                <&kp CARET>;
        };
        td_mu: tap_dance_u {
            compatible = "zmk,behavior-tap-dance";
            label = "U";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N7>,
                <&kp AMPERSAND>;
        };
        td_mi: tap_dance_i {
            compatible = "zmk,behavior-tap-dance";
            label = "I";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N8>,
                <&kp ASTERISK>;
        };
        td_mo: tap_dance_o {
            compatible = "zmk,behavior-tap-dance";
            label = "O";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N9>,
                <&kp LEFT_PARENTHESIS>;
        };
        td_mp: tap_dance_p {
            compatible = "zmk,behavior-tap-dance";
            label = "P";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp N0>,
                <&kp RIGHT_PARENTHESIS>;
        };
        td_mcol: tap_dance_mcol {
            compatible = "zmk,behavior-tap-dance";
            label = "COL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp SEMICOLON>,
                <&kp COLON>;
        };
        td_mquote: tap_dance_mquote {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt DOUBLE_QUOTES APOSTROPHE>,
                <&kp GRAVE>;
        };
        td_mslash: tap_dance_mslash {
            compatible = "zmk,behavior-tap-dance";
            label = "SLASH";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt QUESTION SLASH>,
                <&kp BACKSLASH>;
        };
        td_mgthan: tap_dance_mgthan {
            compatible = "zmk,behavior-tap-dance";
            label = "GTHAN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt GREATER_THAN DOT>,
                <&kp EQUAL>;
        };
        td_mglthan: tap_dance_mlthan {
            compatible = "zmk,behavior-tap-dance";
            label = "LTHAN";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt LESS_THAN COMMA>,
                <&kp EQUAL>;
        };
        td_mother: tap_dance_mother {
            compatible = "zmk,behavior-tap-dance";
            label = "OTHER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mt PIPE MINUS>,
                <&kp UNDERSCORE>;
        };
        td_mlyrshft: tap_dance_lyrshft {
            compatible = "zmk,behavior-tap-dance";
            label = "LYRSHFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp TAB>,
                <&tog 3>;
        };
        td_mshifter: tap_dance_shifter {
            compatible = "zmk,behavior-tap-dance";
            label = "SUPERSHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&sk LEFT_SHIFT>,
                <&kt LEFT_SHIFT>;
        };
    };

    macros {
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            label = "arrow_func";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
      &kp ESCAPE  &kp Q  &kp W         &kp E      &kp R  &kp T   &kp Y    &kp U                 &kp I       &kp O       &kp P    &kp BSPC
    &td_mshifter  &kp A  &kp S         &kp D      &kp F  &kp G   &kp H    &kp J                 &kp K       &kp L    &td_mcol  &td_mquote
&kp LEFT_CONTROL  &kp Z  &kp X         &kp C      &kp V  &kp B   &kp N    &kp M           &td_mglthan  &td_mgthan  &td_mslash  &td_mother
                                &td_mlyrshft  &kp SPACE  &mo 1  &mo_tog 2 3  &kp RET  &mt LMETA LC(LG(UP))
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
   &kp TAB        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5    &kp N6    &kp N7    &kp N8     &kp N9  &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT  &trans    &trans
 &kp LSHFT        &trans        &trans        &trans        &trans        &trans    &trans    &trans    &trans     &trans  &trans    &trans
                                            &kp LGUI        &trans     &kp SPACE   &kp RET    &trans  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp ESC  &kp NUMBER_1     &kp N2     &kp N3          &kp N4            &kp N5             &kp N6           &kp N7         &kp N8     &kp N9     &kp N0      &kp BSPC
  &kp TAB     &kp TILDE  &kp POUND  &kp SLASH  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp BACKSLASH  &kp MINUS   &kp PLUS     &kp GRAVE
&kp LSHFT        &trans     &trans     &trans          &trans          &kp EXCL           &kp AMPS         &kp PIPE       &kp LBRC  &kp EQUAL  &kp UNDER  &kp ASTERISK
                                       &trans          &trans            &trans             &tog 2           &trans         &trans
            >;
        };

        symbols {
            bindings = <
&kp TILDE     &td_mq    &td_mw     &td_me            &td_mr          &td_mt     &td_my       &td_mu       &td_mi      &td_mo      &td_mp  &kp BACKSPACE
   &trans  &kp SLASH  &kp PLUS  &kp MINUS  &kp LEFT_BRACKET  &kp LEFT_BRACE   &kp LEFT     &kp DOWN       &kp UP   &kp RIGHT    &td_mcol     &td_mquote
   &trans     &trans    &trans   &kp PIPE         &kp GRAVE       &kp UNDER  &kp EQUAL  &arrow_func  &td_mglthan  &td_mgthan  &td_mslash     &td_mother
                                   &trans            &trans          &trans     &trans       &trans       &trans
            >;
        };
    };
};
